#!/bin/bash

# nmcli-vpn 3.0.0

# An nmcli wrapper for managing VPN connections and .ovpn configuration files

# https://github.com/chrisdenman/nmcli-vpn

# Commands:
#
#   vpn config list                 - List all known .ovpn configuration files
#   vpn config update               - Updates the .ovpn configuration files
#   vpn connection import FILES...  - Import connections from the specified .ovpn configuration files
#   vpn connection delete           - Delete all connections
#   vpn connection delete NAMES     - Delete the named connections (as they appear in nmcli)
#   vpn connection list             - List all connections
#   vpn connection list --active    - List active connections
#   vpn connection up               - Bring up the sole connection else displays a console menu
#   vpn connection up NAMES...      - Bring up the connections by name (as they appear in nmcli).
#                                     If any name has the value 'random', a random connection will be
#                                     considered.
#   vpn connection down             - Take down all connections
#   vpn connection down NAMES...    - Take down the named connection (as they appear in nmcli)
#

readonly OVPN_EXTENSION=".ovpn"
ME=$(basename "$0") && readonly ME

### User-Implemented Section

OVPN_CONFIGS_DIR="$HOME"/"${OVPN_EXTENSION}" # The location of your .ovpn config files

function _syslog() {
  local message="$1" && shift && local priorityName="${1:-"info"}" # "emerg|alert|crit|err|warning|notice|info|debug|warn"
  logger --id=$$ -t "vpn[$(uuidgen)]" -p "$priorityName" -s "$message"
}
_patch_config() { # Post downloading config updates
  :
}
_update_config() { # Tasks to perform to update the open vpn configuration files
  :
}
_vpn_un() { # Return the VPN provider's username for the configuration file passed as argument 1
  echo "username"
}
_vpn_pwd() { # Return the VPN provider's password for the connection name passed as argument 1
  echo "password"
}

### User-Implemented Section -- END

# shellcheck disable=SC2125
__remove_array_elements() {
  local -a diff
  local element del

  local SRC_ARRAY_NAME=$1[@]
  local SRC_ARRAY=("${!SRC_ARRAY_NAME}")
  local DEL_ARRAY_NAME=$2[@]
  local DEL_ARRAY=("${!DEL_ARRAY_NAME}")

  for element in "${SRC_ARRAY[@]}"
  do
    found=0
    for del in "${DEL_ARRAY[@]}"; do if [[ "${element}" == "${del}" ]]; then found=1; fi; done
    if [[ "${found}" == 0 ]]; then diff+=("$element"); fi
  done
  echo "${diff[@]}"
}
_configs() {
  find "${OVPN_CONFIGS_DIR}" -name "*${OVPN_EXTENSION}" -print0 -type f
}
_configs_basename() {
  _configs | xargs -0 -n 1 basename | sort
}
_config_file_basename() {
  local configBaseName

  configBaseName=$(basename "$1")
  configBaseName=${configBaseName%"$OVPN_EXTENSION"}
  echo "${configBaseName}"
}
_config_update() {
  _update_config
  _patch_config
}
_config_list() {
  local i

  for i in $(find "${OVPN_CONFIGS_DIR}" -name "*${OVPN_EXTENSION}" -type f | sort); do
    echo "$i"
  done
}
_config() {
  case "$1" in
    list) shift 1; _config_list;;            # list the known configurations and their locations
    update) shift 1; _config_update;;        # delete, and re-download the .ovpn files, refresh password files
    -*) _i_o "$1";;
    *) _i_a "$1";;
  esac
}
_connection_list() {
  local activeOption=""
  if [ "$#" -gt 0 ]; then
    case "$1" in
      -a|--active) activeOption="--active";;
      -*) _i_o "$1";;
      *) _i_a "$1";;
    esac
  fi

  nmcli --fields NAME,TYPE con show ${activeOption} | grep "vpn" | cut -d' ' -f1
}
_connection_list_inactive() {
  local ACTIVE_CONNECTION_NAMES CONNECTION_NAMES
  ACTIVE_CONNECTION_NAMES=($(_connection_list --active))
  CONNECTION_NAMES=($(_connection_list))
  __remove_array_elements CONNECTION_NAMES ACTIVE_CONNECTION_NAMES
}
_connection_name_from_config_filename() {
  _config_file_basename "$1"
}
_connection_import() {
  local connectionName configFilePath

  for configFilePath in "$@"; do
    connectionName=$(_connection_name_from_config_filename "${configFilePath}")
    nmcli con import type openvpn file "${configFilePath}"
    nmcli con mod "${connectionName}" vpn.user-name "$(_vpn_un "${configFilePath}")"
  done
}
_connection_up() {
  local connectionName

  # Do not allow second connections
  _connection_list --active | grep -qo "\b$1\b" && return 1

  if [ "$#" -gt 0 ]; then
    for connectionName in "$@"; do
      if [ "${connectionName}" == "random" ]; then
        _connection_up_random
      else
        _connection_up_named "${connectionName}"
      fi
    done
  else
    _connection_up_interactively
  fi
}
_connection_up_random() {
  local CHOICES NUM INDEX
  CHOICES=($(_connection_list_inactive))
  NUM=${#CHOICES[@]}
  if [ "$NUM" -gt 0 ]; then
    INDEX=$(shuf -i 0-$(("$NUM" - 1)) -n 1)
    _connection_up_named "${CHOICES[$INDEX]}"
  else
    echo "no connections" >&2; exit 1
  fi
}
_connection_up_interactively() {
  local connection i CHOICES INDEX MENU

  CHOICES=($(_connection_list_inactive))
  i=0
  MENU=()
  for connection in "${CHOICES[@]}"; do
    MENU[i]="$((i/2))"
    MENU[i+1]="${connection}"
    ((i+=2))
  done

  case "$i" in
    0)  echo "no connections" >&2; exit 1;;
    2)  _connection_up_named "${CHOICES[@]}";;
    *)  INDEX=$(whiptail --menu "Connections" \
          $(($(tput lines) - 0)) \
          $(($(tput cols) - 0)) \
          $(($(tput lines) - 5)) \
          "${MENU[@]}" 2>&1 >/dev/tty)
        [[ $? == 0 ]] && _connection_up_named "${MENU[$INDEX * 2 + 1]}";;
  esac
}
_connection_up_named() {
  local OVPN_SECRETS_FILE

  OVPN_SECRETS_FILE=$(mktemp)
  echo "vpn.secrets.password:$(_vpn_pwd "$1")" > "${OVPN_SECRETS_FILE}"
  chmod u+r "${OVPN_SECRETS_FILE}"
  nmcli con up "$1" passwd-file "${OVPN_SECRETS_FILE}"
  if ! rm -f "${OVPN_SECRETS_FILE}"; then
    echo "Critical failure to delete temporary credentials file ${OVPN_SECRETS_FILE}" >&2; exit 1
  fi
}
_connection_going() {
  _connection_list --active | grep -qo "\b$1\b" && nmcli con "$2" "$1"
}
_connection_down() {
  local connectionName args

  if [ $# == 0 ]; then args="$(_connection_list --active)"; else args=$*; fi
  for connectionName in ${args}; do _connection_going "$connectionName" "down"; done
}
_connection_delete() {
  local connectionName args

  if [ $# == 0 ]; then args="$(_connection_list)"; else args=$*; fi
  for connectionName in ${args}; do _connection_going "$connectionName" "delete"; done
}
_connection() {
  case "$1" in
    import) shift 1; _connection_import "$@";;
    delete) shift 1; _connection_delete "$@";;
    list) shift 1; _connection_list "$@";;
    up) shift 1; _connection_up "$@";;
    down) shift 1; _connection_down "$@";;
    -*) _i_o "$1";;
    *) _i_a "$1";;
  esac
}

_i_o() {
  echo "${ME}: invalid option -- '$1'"
  exit 1
}

_i_a() {
  echo "${ME}: invalid argument -- '$1'"
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    config) _config "$2"; break;;
    connection) shift 1; _connection "$@"; break;;
    -*) _i_o "$1";;
    *) _i_a "$1";;
  esac
done